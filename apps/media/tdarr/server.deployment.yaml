apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: tdarr-server
    app.kubernetes.io/name: tdarr-server
  name: tdarr
  namespace: media
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: tdarr-server
      app.kubernetes.io/name: tdarr-server
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: tdarr-server
        app.kubernetes.io/name: tdarr-server
    spec:
      containers:
        - env:
            - name: TZ
              value: America/Chicago
            - name: ServerIP
              value: 0.0.0.0
            - name: ServerPort
              value: "8266"
            - name: webUIPort
              value: "8265"
            - name: internalNode
              value: "false"
            - name: nodeID
              value: Controller1
          image: tdarr-server
          imagePullPolicy: IfNotPresent
          name: tdarr
          ports:
            - containerPort: 8266
              name: api
              protocol: TCP
            - containerPort: 8265
              name: ui
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /app/configs
              name: tdarr-config
            - mountPath: /media
              name: media
            - mountPath: /app/server
              name: tdarr-server
      volumes:
        - name: media
          persistentVolumeClaim:
            claimName: smb-media-claim
        - name: tdarr-config
          persistentVolumeClaim:
            claimName: smb-appconfig-tdarr-config-claim
        - name: tdarr-server
          persistentVolumeClaim:
            claimName: smb-appconfig-tdarr-server-claim
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "allow-tdarr"
                    operator: In
                    values:
                      - "true"